@page "/"
@using CodingMate.Client.Controls

<MudGrid>
    <MudItem xs="12" sm="4" md="3">
        <Sidebar SelectedColor="@SelectedColor"
                 OnColorSelected="@SelectColor"
                 Rows="@Rows"
                 Columns="@Columns"
                 OnResetMat="ResetMat"
                 OnSaveMat="SaveMat"
                 OnGridSizeChanged="SetGridSize" />
    </MudItem>
    <MudItem xs="12" sm="8" md="9">
        <MudPaper Class="pa-6" Style="overflow-x: auto;">
            <CodingMat Rows="@Rows"
                       Columns="@Columns"
                       CurrentColor="@SelectedColor"
                       Matrix="@Matrix"
                       CellSizeEm="3"
                       OnCellClick="@(args => SetCellColor(args.Item1, args.Item2))" />
        </MudPaper>

        <MudPaper Class="pa-6  mt-4" Style="overflow-x: auto;">
            <div class="d-flex flex-grow-1 gap-4 align-center">
                <div Class="flex-none d-flex" style="width:4em;height:4em;background: #587934;border-radius:0px;border:1px solid #bbb;cursor:pointer;box-sizing:border-box;"></div>
                <div Class="flex-initial d-flex">
                    <MudText Typo="Typo.h6">
                        1D, 1E, 1I, 1J, 1K, 1L, 2C, 2D, 2E, 2F, 2H, 2I, 2J, 3B, 3C, 3D, 3E, 3F, 3G, 3H, 3I,
                        4B, 4C, 4F, 4G, 4H, 4I, 4J, 4K, 4L, 5E, 5F, 5G, 5I, 5J, 5K, 5L, 5M, 6D, 6E, 6K, 6L, 6M, 6N,
                        7C, 7D, 7E, 7M, 7N, 8C, 8D, 9D
                    </MudText>
                </div>
            </div>

            <div class="d-flex flex-grow-1 gap-4 align-center  mt-2">
                <div Class="flex-none d-flex" style="width:4em;height:4em;background: #800000;border-radius:0px;border:1px solid #bbb;cursor:pointer;box-sizing:border-box;"></div>
                <div Class="flex-initial d-flex">
                    <MudText Typo="Typo.h6">
                        5H, 6F, 6I, 7G
                    </MudText>
                </div>
            </div>

            <div class="d-flex flex-grow-1 gap-4 align-center  mt-2">
                <div Class="flex-none d-flex" style="width:4em;height:4em;background: #808000;border-radius:0px;border:1px solid #bbb;cursor:pointer;box-sizing:border-box;"></div>
                <div Class="flex-initial d-flex">
                    <MudText Typo="Typo.h6">
                        6G, 6H, 7F, 8G, 8H, 9H, 9I, 10H, 10I, 11I, 11J, 12H, 12I
                    </MudText>
                </div>
            </div>

            <div class="d-flex flex-grow-1 gap-4 align-center mt-2">
                <div Class="flex-none d-flex" style="width:4em;height:4em;background: #FF8C00;border-radius:0px;border:1px solid #bbb;cursor:pointer;box-sizing:border-box;"></div>
                <div Class="flex-initial d-flex">
                    <MudText Typo="Typo.h6">
                        13E, 13F, 13G, 13H, 13I, 13J, 13K, 14D, 14E, 14F, 14G, 14H, 14I, 14J, 14K, 14L
                    </MudText>
                </div>
            </div>
            
            <div class="d-flex flex-grow-1 gap-4 align-center mt-2">
                <div Class="flex-none d-flex" style="width:4em;height:4em;background: #1E90FF;border-radius:0px;border:1px solid #bbb;cursor:pointer;box-sizing:border-box;"></div>
                <div Class="flex-initial d-flex">
                    <MudText Typo="Typo.h6">
                        14A, 14B, 14C, 14M, 14N, 14O,
                        15A, 15B, 15C, 15D, 15E, 15F, 15G, 15H, 15I, 15J, 15K, 15L, 15M, 15N, 15O
                    </MudText>
                </div>
            </div>

        </MudPaper>

    </MudItem>
</MudGrid>



<script>
    window.exportCodingMatToJpg = function (matData) {
        // matData: {rows, columns, matrix, cellSizePx}
        const cell = matData.cellSizePx || 32;
        const header = cell;
        const w = (matData.columns + 1) * cell;
        const h = (matData.rows + 1) * cell;
        const canvas = document.createElement('canvas');
        canvas.width = w;
        canvas.height = h;
        const ctx = canvas.getContext('2d');

        // Tło
        ctx.fillStyle = "#fff";
        ctx.fillRect(0, 0, w, h);

        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        ctx.font = (cell * 0.6) + "px Arial";

        // Kolumny - litery
        for (let col = 0; col < matData.columns; col++) {
            ctx.fillStyle = "#000";
            ctx.fillText(getColumnLetter(col), (col + 1) * cell + cell / 2, cell / 2);
        }
        // Wiersze - numery
        for (let row = 0; row < matData.rows; row++) {
            ctx.fillStyle = "#000";
            ctx.fillText((row + 1).toString(), cell / 2, (row + 1) * cell + cell / 2);
        }
        // Mata kolorów
        for (let row = 0; row < matData.rows; row++) {
            for (let col = 0; col < matData.columns; col++) {
                const color = matData.matrix[row][col] || "#fff";
                ctx.fillStyle = color;
                ctx.fillRect((col + 1) * cell, (row + 1) * cell, cell, cell);
                ctx.strokeStyle = "#bbb";
                ctx.lineWidth = cell * 0.07;
                ctx.strokeRect((col + 1) * cell, (row + 1) * cell, cell, cell);
            }
        }

        // Eksportuj JPG i pobierz
        canvas.toBlob(function (blob) {
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'mata.jpg';
            document.body.appendChild(a);
            a.click();
            setTimeout(() => {
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }, 100);
        }, "image/jpeg", 0.95);

        // Funkcja do literowania kolumn
        function getColumnLetter(index) {
            let result = "";
            let n = index;
            do {
                result = String.fromCharCode('A'.charCodeAt(0) + (n % 26)) + result;
                n = Math.floor(n / 26) - 1;
            } while (n >= 0);
            return result;
        }
    }
</script>
